#!/usr/bin/env bash

set -e
shopt -s dotglob

### A shell script for managing dotfiles
###
### Arguments:
###   subcommand: the subcommand to call
###   varargs: args to pass to the subcommand
###
### Options:
###   DEST_DIR: where the symlinks to the actual dotfiles
###     will be written (default: "${HOME}")
###   DOTFILES_BRANCH: branch of the dotfiles to clone from/checkout to
###     (default: master)
###   MANAGED_DIR: where your dotfiles will be cloned to
###     (default: "${HOME}/git/dotfiles")
###
### Subcommands:
###   add: add a file to your MANAGED_DIR
###     arguments:
###       filepath: full path to the file to be added
###       subpath: subpath in the MANAGED_DIR that the file or directory will
###         be copied to; subpath must be a directory inside your dotfiles repo (optional)
###
###   git: pass-thru to git on your MANAGED_DIR
###     arguments:
###       varargs: all args that git would normally take
###
###   install: install your dotfiles, cloning them and creating
###     symlinks to them on your DEST_DIR
###     arguments:
###       dotfiles_url: URL for your dotfiles
###       subpath: path in your dotfiles repo to your actual dotfiles
###
###  Examples:
###
###    # add an existing dotfile
###    stowsh add ~/.foo
###
###    # add an existing dotfile to the ubuntu subpath in your dotfiles
###    stowsh add ~/.foo ubuntu

readonly DEST_DIR="${DEST_DIR:-"${HOME}"}"
readonly DOTFILES_BRANCH="${DOTFILES_BRANCH:-master}"
readonly MANAGED_DIR="${MANAGED_DIR:-"${HOME}/git/dotfiles"}"

function _add {
  local src_path="$1"
  local managed_dir_subpath="$2"

  local subpath=''
  if [[ -n "${managed_dir_subpath}" ]]; then
    subpath="/${managed_dir_subpath}"
  fi

  if ! [[ -d "${MANAGED_DIR}${subpath}" ]]; then
    _log "invalid subpath [${subpath}] (not a directory)"
    return 1
  fi

  if [[ -f "${src_path}" ]]; then
    cp "${src_path}" "${MANAGED_DIR}${subpath}"
  elif [[ -d "${src_path}" ]]; then
    local dirname
    dirname="$(basename "${src_path}")"
    mkdir -p "${MANAGED_DIR}${subpath}/${dirname}"
    cp -R "${src_path}"/* "${MANAGED_DIR}${subpath}/${dirname}"
  else
    _log "${src_path} is neither file nor directory"
    return 1
  fi
}

function _log {
  local name="$1"
  local msg="$2"

  >&2 echo "[${name}] ${msg}"
}

function _help {
  local line
  while read -r line; do
    if [[ "${line}" =~ ^### ]]; then
      echo "${line/\#\#\#/}"
    fi
  done < "$(readlink -f "$0")"
}

function _install {
  local dotfiles_url="$1"
  local managed_dir_subpath="$2"
  if git -C "${MANAGED_DIR}" status  &>/dev/null; then
    git -C "${MANAGED_DIR}" checkout "${DOTFILES_BRANCH}"
    git -C "${MANAGED_DIR}" pull
  else
    git clone --branch "${DOTFILES_BRANCH}" "${dotfiles_url}" "${MANAGED_DIR}"
  fi

  local subpath=''
  if [[ -n "${managed_dir_subpath}" ]]; then
    subpath="/${managed_dir_subpath}"
  fi

  _log 'install' "removing old links"
  for filename in "${MANAGED_DIR}${subpath}"/*[^git]*; do
    local dest_filepath
    dest_filepath="${DEST_DIR}/$(basename "${filename}")"
    if [[ -L "${dest_filepath}" ]]; then
      _log 'install' "removing old link: [${dest_filepath}]"
      unlink "${dest_filepath}"
    fi
  done

  _log 'install' "creating links"
  for filename in "${MANAGED_DIR}${subpath}"/*[^git]*; do
    local dest_filepath
    dest_filepath="${DEST_DIR}/$(basename "${filename}")"
    _log 'install' "creating link: [${dest_filepath}]"

    if [[ -f "${dest_filepath}" ]] || [[ -d "${dest_filepath}" ]]; then
      _log 'install' "[${dest_filepath} already exists and is not a symlink; skipping"
      continue
    fi

    ln -s "${filename}" "${dest_filepath}"
  done
}

function _git {
  git -C "${MANAGED_DIR}" "$@"
}

function main {
  local subcmd="$1"

  case "${subcmd}" in
    'add')
      _log 'main' "adding file [$2]"
      _add "$2" "$3"
      return
      ;;
    'git')
      _log 'main' 'running git pass-thru'
      _git "${@:2}"
      return
      ;;
    'help')
      _help | less
      return
      ;;
    'install')
      _log 'main' "installing dotfiles"
      _install "${@:2}"
      return
      ;;
    *)
      _help | less
      _log 'main' "invalid subcommand: ${subcmd}"
      return 1
      ;;
  esac
}

main "$@"
