#!/usr/bin/env bash

set -eo pipefail

### A script for viewing documentation for a shell script.
### Specifically, if a given command or bash script has documentation
### in a header using a the '###' prefix, helpsh
### will grep that documentation for you.
###
### Usage:
###   <Options> helpsh <Arguments>
###
### Arguments:
###   script: the script whose documentation is sought

readonly DOC_PREFIX="${DOC_PREFIX:-'### '}"

function get_path {
  local path="$1"

  if [[ "${path}" =~ ^\./ ]]; then
    realpath "${path}"
    return
  elif [[ -f "${path}" ]]; then
    echo -n "${path}"
    return
  elif command -v "${path}" &>/dev/null; then
    command -v "${path}"
    return
  fi

  return 1
}

function is_text {
  file "$1" | grep text &>/dev/null
}

function realpath {
  # OSX stub for realpath
  # see: https://github.com/whatwg/html-build/issues/90#issuecomment-235960102
  OURPWD=$PWD
  cd "$(dirname "$1")"
  LINK=$(readlink "$(basename "$1")")
  while [ "$LINK" ]; do
    cd "$(dirname "$LINK")"
    LINK=$(readlink "$(basename "$1")")
  done
  REALPATH="$PWD/$(basename "$1")"
  cd "$OURPWD"
  echo -n "$REALPATH"
}

function main {
  local path
  if ! path="$(get_path "$1")"; then
    >&2 echo "[$1] is not a path to a file"
    return 1
  fi

  if [[ ! -x "${path}" ]] && ! is_text "${path}"; then
    >&2 echo "${path} is not an executable text file"
    return 1
  fi

  grep \
    -E \
    "^### " \
    "${path}" \
    | sed \
        -E \
        "s/(^### )//g"
}

main "$@"
