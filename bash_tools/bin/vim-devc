#!/usr/bin/env bash

set -e

### A script for setting up vim in a devcontainer.
###
### Essentially, the script builds and starts a container
### with your code and vim configs mounted into its filesystem.
###
### Usage:
###   vim-devc <Arguments>
###
### Arguments:
###   local_workspace_folder: a (relative or absolute) path
###     to the local workspace folder to be mounted into
###     the container's filesystem
###
### Remarks:
###   The idea behind this script is similar to what vscode
###   does with devcontainers. It builds and starts a container
###   with your local workspace mounted into its filesystem
###   with a bind mount. However, unlike vscode:
###
###   1. The expectation is to use vim inside the
###     container, not from the host machine.
###   1. Your vim config directories (.vimrc and .vim) are
###     mounted into the container filesystem, as well.
###
###   Moreover, vscode's approach is to start a container
###   with a vscode server running in detached mode, then
###   run docker exec to drop the user into a shell
###   on that container. This script, on the other hand,
###   runs the container in attached mode, directly
###   dropping the user into a shell. As such,
###   the remoteUser and containerUser properties effectively
###   do the same thing, as far as this script is concerned.
###
###   The script relies on your local workspace's
###   devcontainer.json file for configuration. That said,
###   only a few of its properties are currently used:
###
###   1. remoteUser
###   1. containerUser
###
###   If remoteUser is set, the container will be started
###   as that user. If remoteUser is not set, containerUser
###   will be used, instead. If containerUser is not set,
###   the last USER directive of the image's build will
###   be used, instead.

ROOT_DIR="$(dirname "$(readlink --canonicalize "$0")")"
readonly DEV_CONTAINER_NAME='vim-devc'
readonly ROOT_DIR

function build_vim_overlay {
  local tag="$1"
  local no_version_tag
  no_version_tag="$(echo -n "${tag}" | cut -d ':' -f1)"
  local tag_version
  tag_version="$(echo -n "${tag}" | cut -d ':' -f2)"

  local vim_devc_tag="${no_version_tag}-vim-devc:${tag_version}"
  docker build \
    --tag "${vim_devc_tag}" \
    --file - "${ROOT_DIR}"/../lib/vim_devc/context \
    <<EOF
FROM ${tag}

USER 0

RUN set -e; \
    dnf install --assumeyes gcc make ncurses ncurses-devel; \
    curl \
      --location \
      --output vim-src.zip \
      https://github.com/vim/vim/archive/refs/heads/master.zip; \
    mkdir vim-src; \
    unzip -d vim-src vim-src.zip; \
    cd vim-src/vim-master; \
    make; \
    make install; \
    vim --version; \
    : ;

USER "\${REMOTE_USER}"
EOF

  echo -n "${vim_devc_tag}"
}

function devcontainer_json {
  local local_workspace_folder="$1"
  local key="$2"

  local json_path="${local_workspace_folder}/.devcontainer/devcontainer.json"
  if [[ ! -f "${json_path}" ]]; then
    >&2 echo "missing devcontainer.json file in local workspace folder [${local_workspace_folder}]"
    return 1
  fi

  clconf --ignore-env --yaml "${json_path}" getv "${key}"
}

function get_user {
  local local_workspace_folder="$1"

  local user
  if user="$(devcontainer_json "${local_workspace_folder}" 'remoteUser')"; then
    echo -n "${user}"
    return
  fi

  if user="$(devcontainer_json "${local_workspace_folder}" 'containerUser')"; then
    echo -n "${user}"
    return
  fi

  docker image inspect cjvirtucio87/go-devc:rocky8 \
    | clconf --pipe getv 0/Config/User
}

function main {
  local local_workspace_folder="${1:-"${PWD}"}"
  local_workspace_folder="$(readlink --canonicalize "${local_workspace_folder}")"

  local tag
  tag="$(devcontainer_json "${local_workspace_folder}" 'image')"

  local vim_devc_tag
  vim_devc_tag="$(build_vim_overlay "${tag}")"

  local workspace_name
  workspace_name="$(basename "${local_workspace_folder}")"

  local remote_user
  remote_user="$(get_user "${local_workspace_folder}")"

  local container_workspace_folder="/workspaces/${workspace_name}"
  docker run \
    --rm \
    --interactive \
    --tty \
    --entrypoint bash \
    --mount "type=bind,src=${local_workspace_folder},dst=${container_workspace_folder}" \
    --mount "type=bind,src=${HOME}/.vimrc,dst=/home/dev/.vimrc" \
    --mount "type=bind,src=${HOME}/.vim,dst=/home/${remote_user}/.vim" \
    --workdir "${container_workspace_folder}" \
    --user "${remote_user}" \
    --name "${DEV_CONTAINER_NAME}" \
    "${vim_devc_tag}"
}

main "$@"
